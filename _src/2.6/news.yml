---
- section:
  - Language changes
  ticket: 'Feature #14250'
  md: "`$SAFE` is a process global state and we can set it to 0 again. [Feature #14250]"
  target: language/behavior
- section:
  - Core classes updates (outstanding ones only)
  - Proc
  - Incompatible changes
  ticket: 'Feature #14250'
  md: 'Proc#call doesn''t change `$SAFE` any more.  [Feature #14250]'
  target: language/behavior
- section:
  - Language changes
  ticket: 'Feature #14223'
  md: 'refinements take place at block passing.  [Feature #14223]'
  target: language/behavior
- section:
  - Language changes
  ticket: 'Feature #15326'
  md: 'refinements take place at Kernel#public_send.  [Feature #15326]'
  target: language/behavior
- section:
  - Language changes
  ticket: 'Feature #15327'
  md: 'refinements take place at Kernel#respond_to?.  [Feature #15327]'
  target:
- section:
  - Language changes
  ticket: 'Feature #14606'
  md: "`else` without `rescue` now causes a syntax error.  [EXPERIMENTAL] [Feature #14606]"
  target:
- section:
  - Language changes
  ticket: 'Feature #13770'
  md: 'constant names may start with a non-ASCII capital letter. [Feature #13770]'
  target:
- section:
  - Language changes
  ticket: 'Feature #12912'
  md: |-
    An endless range is introduced.  You can write a range that has no end, like `(0..)` (or similarly `(0...)`). The following shows typical use cases.  [Feature #12912]

        ary[1..]                              # identical to ary[1..-1]
        (1...).each {|index| block }          # infinite loop from index 1
        ary.zip(1..) {|elem, index| block }   # ary.each.with_index(1) { }
  target:
- section:
  - Language changes
  ticket: none
  md: Non-Symbol key in keyword arguments hash causes an exception.
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Enumerator::ArithmeticSequence
  ticket: none
  md: >-
    This is a new class to represent a generator of an arithmetic sequence, that is a number sequence defined by a common difference. It can be used for representing what is similar to Python's slice. You
    can get an instance of this class from Numeric#step and Range#step.
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Enumerator::Chain
  ticket: none
  md: This is a new class to represent a chain of enumerables that works as a single enumerator, generated by such methods as Enumerable#chain and Enumerator#+.
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Numeric
  - Incompatible changes
  ticket: none
  md: Numeric#step now returns an instance of Enumerator::ArithmeticSequence class rather than one of Enumerator class.
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Range
  - Incompatible changes
  ticket: none
  md: Range#step now returns an instance of Enumerator::ArithmeticSequence class rather than one of Enumerator class.
  target:
- section:
  - Core classes updates (outstanding ones only)
  - RubyVM::AbstractSyntaxTree
  - New methods
  ticket: none
  md: RubyVM::AbstractSyntaxTree.parse parses a given string and returns AST nodes. [experimental]
  target:
- section:
  - Core classes updates (outstanding ones only)
  - RubyVM::AbstractSyntaxTree
  - New methods
  ticket: none
  md: RubyVM::AbstractSyntaxTree.parse_file parses a given file and returns AST nodes.  [experimental]
  target:
- section:
  - Core classes updates (outstanding ones only)
  - RubyVM::AbstractSyntaxTree
  - New methods
  ticket: none
  md: |-
    RubyVM::AbstractSyntaxTree.of returns AST nodes of the given proc or method.
     experimental :
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - BigDecimal
  ticket: none
  md: Update to the version 1.4.0.  This version includes several compatibility issues, see Compatibility issues section below for the detail.
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - BigDecimal
  ticket: none
  md: BigDecimal() accepts new keyword "exception:" similar to Float().
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - BigDecimal
  - Note for the differences among recent versions
  ticket: none
  md: You should want to know the differences among recent versions of bigdecimal. Please select the suitable version of bigdecimal according to the following information.
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - BigDecimal
  - Note for the differences among recent versions
  ticket: none
  md: >-
    1.3.5 has BigDecimal.new without "exception:" keyword.  You can see the deprecation warning of BigDecimal.new when you specify "-w" option. BigDecimal(), BigDecimal.new, and Object#to_d methods are
    same.
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - BigDecimal
  - Note for the differences among recent versions
  ticket: none
  md: 1.4.0 has BigDecimal.new with "exception:" keyword.  You always see the deprecation warning of BigDecimal.new.  Object#to_d method is different from BigDecimal() and BigDecimal.new.
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - BigDecimal
  - Note for the differences among recent versions
  ticket: none
  md: 1.5.0 will be released after releasing Ruby 2.6.0.  This version doesn't have BigDecimal.new method.
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - Bundler
  ticket: none
  md: Use 1.17.2. It's the latest stable version.
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - Coverage
  - New options
  ticket: none
  md: Add `:oneshot_lines` keyword argument to Coverage.start.
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - Coverage
  - New options
  ticket: none
  md: Add `:stop` and `:clear` keyword arguments to Coverage.result. If `clear` is true, it clears the counters to zero. If `stop` is true, it disables coverage measurement.
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - Coverage
  - New methods
  ticket: none
  md: Coverage.line_stub, which is a simple helper function that creates the "stub" of line coverage from a given source code.
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - ERB
  - New options
  ticket: none
  md: erb command's `-S` option is deprecated, which will be removed in the next version.
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - Matrix
  - New methods
  ticket: none
  md: Matrix#antisymmetric?, Matrix#skew_symmetric?
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - Matrix
  - New methods
  ticket: none
  md: Matrix#[]=
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - Matrix
  - New methods
  ticket: none
  md: Vector#map!, Vector#collect!
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - Matrix
  - New methods
  ticket: none
  md: Vector#[]=
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - NKF
  ticket: none
  md: Upgrade to nkf v2.1.5
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - Psych
  ticket: none
  md: Upgrade to Psych 3.1.0
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - REXML
  ticket: none
  md: Upgrade to REXML 3.1.8 https://github.com/ruby/rexml/blob/master/NEWS.md
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - REXML
  - Improved some XPath implementations
  ticket: none
  md: "`concat()` function: Stringify all arguments before concatenating"
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - REXML
  - Improved some XPath implementations
  ticket: none
  md: "`string()` function: Support context node"
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - REXML
  - Improved some XPath implementations
  ticket: none
  md: "`string()` function: Support processing instruction node"
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - REXML
  - Improved some XPath implementations
  ticket: none
  md: Support `"*:#{ELEMENT_NAME}"` syntax in XPath 2.0
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - REXML
  - Fixed some XPath implementations
  ticket: none
  md: '`"//#{ELEMENT_NAME}[#{POSITION}]"` case'
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - REXML
  - Fixed some XPath implementations
  ticket: none
  md: "`string()` function: Fix `function(document)` returns nodes that are out of root elements."
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - REXML
  - Fixed some XPath implementations
  ticket: none
  md: '`"/ #{ELEMENT_NAME} "` case'
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - REXML
  - Fixed some XPath implementations
  ticket: none
  md: '`"/ #{ELEMENT_NAME} [ #{PREDICATE} ]"` case'
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - REXML
  - Fixed some XPath implementations
  ticket: none
  md: '`"/ #{AXIS}::#{ELEMENT_NAME}"` case'
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - REXML
  - Fixed some XPath implementations
  ticket: none
  md: '`"#{N}-#{M}"` case: One or more white spaces were required before `"-"`'
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - REXML
  - Fixed some XPath implementations
  ticket: none
  md: '`"/child::node()"` case'
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - REXML
  - Fixed some XPath implementations
  ticket: none
  md: '`"#{FUNCTION}()/#{PATH}"` case'
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - REXML
  - Fixed some XPath implementations
  ticket: none
  md: '`"@#{ATTRIBUTE}/parent::"` case'
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - REXML
  - Fixed some XPath implementations
  ticket: none
  md: '`"name(#{NODE_SET})"` case'
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - RSS
  - New options
  ticket: none
  md: 'RSS::Parser.parse: Accept options as Hash. `:validate` , `:ignore_unknown_element` , `:parser_class` options are available.'
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - RubyGems
  ticket: none
  md: Upgrade to RubyGems 3.0.0
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - RubyGems
  ticket: none
  md: https://blog.rubygems.org/2018/12/19/3.0.0-released.html
  target:
- section:
  - Stdlib compatibility issues (excluding feature bug fixes)
  ticket: none
  md: |-
    These standard libraries have been promoted to default gems.

    *   e2mmap
    *   forwardable
    *   irb
    *   logger
    *   matrix
    *   mutex_m
    *   ostruct
    *   prime
    *   rexml
    *   rss
    *   shell
    *   sync
    *   thwait
    *   tracer
  target:
- section:
  - Stdlib compatibility issues (excluding feature bug fixes)
  - BigDecimal
  ticket: none
  md: |-
    The following methods are removed.

    *   BigDecimal.allocate
    *   BigDecimal.ver
  target:
- section:
  - Stdlib compatibility issues (excluding feature bug fixes)
  - BigDecimal
  ticket: none
  md: BigDecimal() parses the given string like Float().
  target:
- section:
  - Stdlib compatibility issues (excluding feature bug fixes)
  - BigDecimal
  ticket: none
  md: String#to_d parses the receiver string like String#to_f.
  target:
- section:
  - Stdlib compatibility issues (excluding feature bug fixes)
  - BigDecimal
  ticket: none
  md: BigDecimal.new will be removed on its version 1.5.
  target:
- section:
  - Implementation improvements
  ticket: none
  md: VM generator script renewal; makes the generated VM more optimized. [GH-1779]
  target:
- section:
  - Miscellaneous changes
  ticket: none
  md: |-
    On macOS, shared libraries no longer include a full version number of Ruby in their names.  This eliminates the burden of each teeny upgrade on the platform that users need to rebuild every extension library.

        *   libruby.2.6.0.dylib
        *   libruby.2.6.dylib -> libruby.2.6.0.dylib
        *   libruby.dylib -> libruby.2.6.0.dylib


        *   libruby.2.6.dylib
        *   libruby.dylib -> libruby.2.6.dylib
  target:
- section:
  - Miscellaneous changes
  ticket: none
  md: Extracted misc/*.el files to https://github.com/ruby/elisp
  target:
- section:
  - Language changes
  ticket: 'Feature #12490'
  md: |-
    "shadowing outer local variable" warning was removed.  [Feature #12490] You can now write the following without warning.

        user = users.find {|user| cond(user) }
  target:
- section:
  - Language changes
  ticket: 'Feature #8661'
  md: 'Print exception backtrace and error message in reverse order when the exception is not caught and STDOUT is unchanged and a tty. [Feature #8661]'
  target:
- section:
  - Language changes
  ticket: 'Feature #8257'
  md: 'Print `cause` of the exception if the exception is not caught and printed its backtraces and error message [Feature #8257]'
  target:
- section:
  - Language changes
  ticket: 'Feature #5400'
  md: 'Flip-flop syntax is deprecated. [Feature #5400]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Array
  - New methods
  ticket: 'Feature #14097'
  md: 'Added Array#union and Array#difference instance methods.  [Feature #14097]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Array
  - Modified methods
  ticket: 'Feature #15143'
  md: 'Array#to_h now maps elements to new keys and values by the block if given.  [Feature #15143]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Enumerable
  - Modified methods
  ticket: 'Feature #15143'
  md: 'Enumerable#to_h now maps elements to new keys and values by the block if given.  [Feature #15143]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - ENV
  - Modified methods
  ticket: 'Feature #15143'
  md: 'ENV.to_h now maps names and values to new keys and values by the block if given.  [Feature #15143]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Hash
  - Modified methods
  ticket: 'Feature #15143'
  md: 'Hash#to_h now maps keys and values to new keys and values by the block if given.  [Feature #15143]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Struct
  - Modified methods
  ticket: 'Feature #15143'
  md: 'Struct#to_h now maps keys and values to new keys and values by the block if given.  [Feature #15143]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Array
  - Aliased methods
  ticket: 'Feature #13784'
  md: 'Array#filter is a new alias for Array#select. [Feature #13784]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Array
  - Aliased methods
  ticket: 'Feature #13784'
  md: 'Array#filter! is a new alias for Array#select!. [Feature #13784]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Enumerable
  - Aliased methods
  ticket: 'Feature #13784'
  md: 'Enumerable#filter is a new alias for Enumerable#select. [Feature #13784]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Enumerator::Lazy
  - Aliased methods
  ticket: 'Feature #13784'
  md: 'Enumerator::Lazy#filter is a new alias for Enumerator::Lazy#select.  [Feature #13784]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Hash
  - Aliased methods
  ticket: 'Feature #13784'
  md: 'Hash#filter is a new alias for Hash#select.  [Feature #13784]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Hash
  - Aliased methods
  ticket: 'Feature #13784'
  md: 'Hash#filter! is a new alias for Hash#select!. [Feature #13784]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Struct
  - Aliased method
  ticket: 'Feature #13784'
  md: 'Struct#filter is a new alias for Struct#select. [Feature #13784]'
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - Set
  - Aliased methods
  ticket: 'Feature #13784'
  md: 'Set#filter! is a new alias for Set#select!.  [Feature #13784]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Binding
  - New methods
  ticket: 'Feature #14230'
  md: |-
    added Binding#source_location.  [Feature #14230]
     This method returns the source location of the binding, a 2-element array of `__FILE__` and `__LINE__`. Traditionally, the same information could be retrieved by `eval("[__FILE__, __LINE__]", binding)`, but we are planning to change this behavior so that Kernel#eval ignores binding's source location [Bug #4352].  So, users should use this newly-introduced method instead of Kernel#eval.
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Dir
  - New methods
  ticket: 'Feature #13969'
  md: 'added Dir#each_child and Dir#children instance methods. [Feature #13969]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Enumerable
  - New methods
  ticket: 'Feature #15144'
  md: 'Enumerable#chain returns an enumerator object that iterates over the elements of the receiver and then those of each argument in sequence.  [Feature #15144]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Enumerator
  - New methods
  ticket: 'Feature #15144'
  md: 'Enumerator#+ returns an enumerator object that iterates over the elements of the receiver and then those of the other operand.  [Feature #15144]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Exception
  - New options
  ticket: 'Bug #14324'
  md: 'Exception#full_message takes `:highlight` and `:order` options. [Bug #14324]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Hash
  - Modified methods
  ticket: 'Feature #15111'
  md: 'Hash#merge, Hash#merge!, and Hash#update now accept multiple arguments.  [Feature #15111]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - IO
  - New options
  ticket: 'Feature #11258'
  md: 'new mode character `''x''` to open files for exclusive access. [Feature #11258]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Kernel
  - Aliased methods
  ticket: 'Feature #14594'
  md: 'Kernel#then is a new alias for Kernel#yield_self. [Feature #14594]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Kernel
  - New options
  ticket: 'Feature #12732'
  md: 'Kernel#Complex, Kernel#Float, Kernel#Integer, and Kernel#Rational take `:exception` option to specify the way of error handling.  [Feature #12732]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Kernel
  - New options
  ticket: 'Feature #14386'
  md: 'Kernel#system takes `:exception` option to raise an exception on failure.  [Feature #14386]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Kernel
  - Incompatible changes
  ticket: 'Misc #14907'
  md: >-
    Kernel#system and Kernel#exec do not close non-standard file descriptors (The default of the `:close_others` option is changed to `false`, but we still set the `FD_CLOEXEC` flag on descriptors we create).
    [Misc #14907]
  target:
- section:
  - Core classes updates (outstanding ones only)
  - KeyError
  - New options
  ticket: 'Feature #14313'
  md: 'KeyError.new accepts `:receiver` and `:key` options to set receiver and key in Ruby code.  [Feature #14313]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - NameError
  - New options
  ticket: 'Feature #14313'
  md: 'NameError.new accepts `:receiver` option to set receiver in Ruby code.  [Feature #14313]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - NoMethodError
  - New options
  ticket: 'Feature #14313'
  md: 'NoMethodError.new accepts `:receiver` option to set receiver in Ruby code.  [Feature #14313]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Method
  - New methods
  ticket: 'Feature #6284'
  md: 'added Method#<< and Method#>> for Proc composition.  [Feature #6284]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Proc
  - New methods
  ticket: 'Feature #6284'
  md: 'added Proc#<< and Proc#>> for Proc composition.  [Feature #6284]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Module
  - New methods
  ticket: 'Feature #14944'
  md: >-
    Module#method_defined?, Module#private_method_defined?, and Module#protected_method_defined? now accept the second parameter as optional. If it's `true` (=default), checks ancestor modules/classes,
    or checks only the class itself. [Feature #14944]
  target:
- section:
  - Core classes updates (outstanding ones only)
  - NilClass
  - New methods
  ticket: 'Feature #15231'
  md: 'NilClass#=~ is added for compatibility.  [Feature #15231]'
  target:
- section:
  - Compatibility issues (excluding feature bug fixes)
  - Object
  ticket: 'Feature #15231'
  md: 'Object#=~ is deprecated.  [Feature #15231]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Random
  - New methods
  ticket: 'Feature #4938'
  md: 'added Random.bytes.  [Feature #4938]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Range
  - New methods
  ticket: 'Feature #14697'
  md: 'Added Range#% instance method.  [Feature #14697]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Range
  - Incompatible changes
  ticket: 'Feature #14575'
  md: 'Range#=== now uses `#cover?` instead of `#include?` method. [Feature #14575]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Range
  - Incompatible changes
  ticket: 'Feature #14473'
  md: 'Range#cover? now accepts Range object. [Feature #14473]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Regexp/String
  ticket: 'Feature #14802'
  md: 'Update Unicode version from 10.0.0 to 11.0.0. [Feature #14802] This includes a rewrite of the grapheme cluster (/X/) algorithm and special-casing for Georgian MTAVRULI on String#downcase.'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Regexp/String
  ticket: 'Feature #14802'
  md: 'Update Emoji version from 5.0 to 11.0.0 [Feature #14802]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - RubyVM
  - New methods
  ticket: 'Feature #15230'
  md: 'RubyVM.resolve_feature_path identifies the file that will be loaded by "require(feature)". [experimental] [Feature #15230]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - String
  ticket: 'Feature #14915'
  md: 'String#crypt is now deprecated. [Feature #14915]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - String
  - New features
  ticket: 'Feature #4780'
  md: 'String#split yields each substring to the block if given. [Feature #4780]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - Time
  - New features
  ticket: 'Feature #14850'
  md: 'Time.new and Time#getlocal accept a timezone object as well as an UTC offset string. Time#+, Time#- and Time#succ also preserve the timezone.  [Feature #14850]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - TracePoint
  - New features
  ticket: 'Feature #15287'
  md: '"script_compiled" event is supported. [Feature #15287]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - TracePoint
  - New methods
  ticket: 'Feature #15287'
  md: 'TracePoint#instruction_sequence [Feature #15287]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - TracePoint
  - New methods
  ticket: 'Feature #15287'
  md: 'TracePoint#eval_script [Feature #15287]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - TracePoint
  - New methods
  ticket: 'Feature #14694'
  md: 'TracePoint#parameters [Feature #14694]'
  target:
- section:
  - Core classes updates (outstanding ones only)
  - TracePoint
  - Modified methods
  ticket: 'Feature #15289'
  md: 'TracePoint#enable accepts new keywords "target:" and "target_line:". [Feature #15289]'
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - Bundler
  ticket: 'Feature #12733'
  md: 'Add Bundler to Standard Library. [Feature #12733]'
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - Coverage
  ticket: 'Feature #15022'
  md: >-
    A oneshot_lines mode is added.  [Feature #15022] This mode checks "whether each line was executed at least once or not", instead of "how many times each line was executed". A hook for each line is fired
    at most once, and after it is fired the hook flag is removed, i.e., it runs with zero overhead.
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - ERB
  - New options
  ticket: 'Feature #14256'
  md: 'Add `:trim_mode` and `:eoutvar` keyword arguments to ERB.new. Now non-keyword arguments other than first one are softly deprecated and will be removed when Ruby 2.5 becomes EOL. [Feature #14256]'
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - FileUtils
  - New methods
  ticket: 'Feature #4189'
  md: 'FileUtils#cp_lr.  [Feature #4189]'
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - Matrix
  - New methods
  ticket: 'Feature #14151'
  md: 'Matrix#map!, Matrix#collect! [Feature #14151]'
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - Net
  - New options
  ticket: 'Feature #13396'
  md: 'Add `:write_timeout` keyword argument to Net::HTTP.new. [Feature #13396]'
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - Net
  - New methods
  ticket: 'Feature #13396'
  md: 'Add Net::HTTP#write_timeout and Net::HTTP#write_timeout=.  [Feature #13396]'
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - Net
  - New constant
  ticket: 'Bug #14688'
  md: 'Add Net::HTTPClientException to deprecate Net::HTTPServerException, whose name is misleading.  [Bug #14688]'
  target:
- section:
  - Stdlib updates (outstanding ones only)
  - URI
  - New constant
  ticket: 'Feature #14035'
  md: 'Add URI::File to handle file URI scheme.  [Feature #14035]'
  target:
- section:
  - Compatibility issues (excluding feature bug fixes)
  - Dir
  ticket: 'Feature #14643'
  md: 'Dir.glob with `''\0''`-separated pattern list will be deprecated, and is now warned.  [Feature #14643]'
  target:
- section:
  - Compatibility issues (excluding feature bug fixes)
  - File
  ticket: 'Feature #14245'
  md: 'File.read, File.binread, File.write, File.binwrite, File.foreach, and File.readlines do not invoke external commands even if the path starts with the pipe character `''|''`. [Feature #14245]'
  target:
- section:
  - Stdlib compatibility issues (excluding feature bug fixes)
  - Pathname
  ticket: 'Feature #14245'
  md: >-
    Pathname#read, Pathname#binread, Pathname#write, Pathname#binwrite, Pathname#each_line and Pathname#readlines do not invoke external commands even if the path starts with the pipe character `'|'`. This
    follows [Feature #14245].
  target:
- section:
  - Stdlib compatibility issues (excluding feature bug fixes)
  - BigDecimal
  ticket: 'Feature #13984'
  md: 'Every BigDecimal object is frozen. [Feature #13984]'
  target:
- section:
  - Implementation improvements
  ticket: 'Feature #14318'
  md: |-
    Speedup Proc#call because we don't need to care about `$SAFE` any more. [Feature #14318]
     With `lc_fizzbuzz` benchmark which uses Proc#call many times we can measure x1.4 improvements.  [Bug #10212]
  target:
- section:
  - Implementation improvements
  ticket: 'Feature #14330'
  md: |-
    Speedup block.call where `block` is passed block parameter. [Feature #14330]
     Ruby 2.5 improves block passing performance. [Feature #14045]
     Additionally, Ruby 2.6 improves the performance of passed block calling.
  target:
- section:
  - Implementation improvements
  ticket: 'Feature #14235'
  md: |-
    Introduce an initial implementation of a JIT (Just-in-time) compiler. [Feature #14235] [experimental]

    *   `--jit` command line option is added to enable JIT. `--jit-verbose=1` is
        good for inspection.  See `ruby --help` for others.
    *   To generate machine code, this JIT compiler uses the C compiler used for
        building the interpreter. Currently GCC, Clang, and Microsoft Visual C++
        are supported for it.
    *   `--disable-mjit-support` option is added to configure. This is added for
        JIT debugging, but if you get an error on building a header file for JIT,
        you can use this option to skip building it as a workaround.
    *   rb_waitpid reimplemented on Unix-like platforms to maintain compatibility
        with processes created for JIT [Bug #14867]
  target:
- section:
  - Implementation improvements
  ticket: 'Feature #14757'
  md: |-
    Thread cache enabled for pthreads platforms (for Thread.new and Thread.start).
     [Feature #14757]
  target:
- section:
  - Implementation improvements
  ticket: 'Misc #14937'
  md: 'timer thread is eliminated for platforms with POSIX timers [Misc #14937]'
  target:
- section:
  - Implementation improvements
  ticket: 'Bug #14858'
  md: >-
    Transient Heap (theap) is supported. [Bug #14858] [Feature #14989] theap is a managed heap for short-living memory objects. For example, making a small and short-living Hash object is x2 faster. With
    rdoc benchmark, we measured 6-7% performance improvement.
  target:
- section:
  - Implementation improvements
  ticket: 'Feature #14739'
  md: 'Native implementations (arm32, arm64, ppc64le, win32, win64, x86, amd64) of coroutines to improve performance of Fiber significantly. [Feature #14739]'
  target:
